-- Haskell module generated by the BNF converter

{-# OPTIONS_GHC -fno-warn-unused-matches #-}

module SkelProgettoPar where

import Prelude (($), Either(..), String, (++), Show, show)
import qualified AbsProgettoPar

type Err = Either String
type Result = Err String

failure :: Show a => a -> Result
failure x = Left $ "Undefined case: " ++ show x

transIdent :: AbsProgettoPar.Ident -> Result
transIdent x = case x of
  AbsProgettoPar.Ident string -> failure x

transBoolean :: AbsProgettoPar.Boolean -> Result
transBoolean x = case x of
  AbsProgettoPar.Boolean_true -> failure x
  AbsProgettoPar.Boolean_false -> failure x
  AbsProgettoPar.Boolean_True -> failure x
  AbsProgettoPar.Boolean_False -> failure x

transS :: AbsProgettoPar.S -> Result
transS x = case x of
  AbsProgettoPar.StartCode statements -> failure x

transSTATEMENTS :: AbsProgettoPar.STATEMENTS -> Result
transSTATEMENTS x = case x of
  AbsProgettoPar.ListStatements statement statements -> failure x
  AbsProgettoPar.EmptyStatement -> failure x

transB :: AbsProgettoPar.B -> Result
transB x = case x of
  AbsProgettoPar.BlockStatement statements -> failure x

transSTATEMENT :: AbsProgettoPar.STATEMENT -> Result
transSTATEMENT x = case x of
  AbsProgettoPar.Statement b -> failure x
  AbsProgettoPar.ExpressionStatement expressionstatement -> failure x
  AbsProgettoPar.AssignmentStatement lvalueexpression assignop expression -> failure x
  AbsProgettoPar.ConditionalStatement conditionalstate -> failure x
  AbsProgettoPar.WhileDoStatement whilestatement -> failure x
  AbsProgettoPar.DoWhileStatement dostatement -> failure x
  AbsProgettoPar.ForStatement forstatement -> failure x
  AbsProgettoPar.BreakStatement -> failure x
  AbsProgettoPar.ContinueStatement -> failure x
  AbsProgettoPar.ReturnStatement returnstatement -> failure x
  AbsProgettoPar.VariableDeclarationStatement variabletype vardeclist -> failure x
  AbsProgettoPar.ForAllStatement forallstatement -> failure x
  AbsProgettoPar.ProcedureStatement ident parameters statements -> failure x
  AbsProgettoPar.FunctionStatement ident parameters primitivetype statements -> failure x

transPARAMETERS :: AbsProgettoPar.PARAMETERS -> Result
transPARAMETERS x = case x of
  AbsProgettoPar.ParameterList parameter parameters -> failure x
  AbsProgettoPar.ParameterListEmpty -> failure x

transPARAMETER :: AbsProgettoPar.PARAMETER -> Result
transPARAMETER x = case x of
  AbsProgettoPar.Parameter ident primitivetype -> failure x

transASSIGNOP :: AbsProgettoPar.ASSIGNOP -> Result
transASSIGNOP x = case x of
  AbsProgettoPar.AssignOperationEq -> failure x
  AbsProgettoPar.AssignOperationEqPlus -> failure x
  AbsProgettoPar.AssignOperationEqMinus -> failure x
  AbsProgettoPar.AssignOperationEqProd -> failure x
  AbsProgettoPar.AssignOperationEqFract -> failure x
  AbsProgettoPar.AssignOperationEqPercent -> failure x
  AbsProgettoPar.AssignOperationEqPower -> failure x

transVARIABLETYPE :: AbsProgettoPar.VARIABLETYPE -> Result
transVARIABLETYPE x = case x of
  AbsProgettoPar.VariableTypeParam -> failure x
  AbsProgettoPar.VariableTypeConst -> failure x
  AbsProgettoPar.VariableTypeVar -> failure x
  AbsProgettoPar.VariableTypeRef -> failure x
  AbsProgettoPar.VariableTypeConstRef -> failure x

transVARDECLIST :: AbsProgettoPar.VARDECLIST -> Result
transVARDECLIST x = case x of
  AbsProgettoPar.VariableDeclarationSingle vardecid -> failure x

transVARDECID :: AbsProgettoPar.VARDECID -> Result
transVARDECID x = case x of
  AbsProgettoPar.VariableDeclaration identlist typepart initpart -> failure x

transIDENTLIST :: AbsProgettoPar.IDENTLIST -> Result
transIDENTLIST x = case x of
  AbsProgettoPar.IdentifierList ident identlist -> failure x
  AbsProgettoPar.IdentifierSingle ident -> failure x

transTYPEPART :: AbsProgettoPar.TYPEPART -> Result
transTYPEPART x = case x of
  AbsProgettoPar.TypePart typeexpression -> failure x

transINITPART :: AbsProgettoPar.INITPART -> Result
transINITPART x = case x of
  AbsProgettoPar.InitializzationPart expression -> failure x
  AbsProgettoPar.InitializzationPartArray listelementarray -> failure x
  AbsProgettoPar.InitializzationPartEmpty -> failure x

transLISTELEMENTARRAY :: AbsProgettoPar.LISTELEMENTARRAY -> Result
transLISTELEMENTARRAY x = case x of
  AbsProgettoPar.ListElementsOfArray expression listelementarray -> failure x
  AbsProgettoPar.ListElementOfArray expression -> failure x

transTYPEEXPRESSION :: AbsProgettoPar.TYPEEXPRESSION -> Result
transTYPEEXPRESSION x = case x of
  AbsProgettoPar.TypeExpression primitivetype -> failure x
  AbsProgettoPar.TypeExpressionArraySimple rangeexp primitivetype -> failure x
  AbsProgettoPar.TypeExpressionArray rangeexp primitivetype -> failure x
  AbsProgettoPar.TypeExpressionPointer primitivetype pointer -> failure x

transPOINTER :: AbsProgettoPar.POINTER -> Result
transPOINTER x = case x of
  AbsProgettoPar.PointerSymbol pointer -> failure x
  AbsProgettoPar.PointerSymbolSingle -> failure x

transRANGEEXP :: AbsProgettoPar.RANGEEXP -> Result
transRANGEEXP x = case x of
  AbsProgettoPar.RangeExpression expression1 expression2 rangeexp -> failure x
  AbsProgettoPar.RangeExpressionSingle expression1 expression2 -> failure x

transPRIMITIVETYPE :: AbsProgettoPar.PRIMITIVETYPE -> Result
transPRIMITIVETYPE x = case x of
  AbsProgettoPar.PrimitiveTypeVoid -> failure x
  AbsProgettoPar.PrimitiveTypeBool -> failure x
  AbsProgettoPar.PrimitiveTypeInt -> failure x
  AbsProgettoPar.PrimitiveTypeReal -> failure x
  AbsProgettoPar.PrimitiveTypeString -> failure x
  AbsProgettoPar.PrimitiveTypeChar -> failure x
  AbsProgettoPar.TypeArray primitivetype -> failure x

transCONDITIONALSTATE :: AbsProgettoPar.CONDITIONALSTATE -> Result
transCONDITIONALSTATE x = case x of
  AbsProgettoPar.ConditionalStatementSimpleThen expression statement elsestatement -> failure x
  AbsProgettoPar.ConditionalStatementSimpleWThen expression b elsestatement -> failure x
  AbsProgettoPar.ConditionalStatementCtrlThen ctrldecstatement statement elsestatement -> failure x
  AbsProgettoPar.ConditionalStatementCtrlWThen ctrldecstatement b elsestatement -> failure x

transWHILESTATEMENT :: AbsProgettoPar.WHILESTATEMENT -> Result
transWHILESTATEMENT x = case x of
  AbsProgettoPar.WhileStateSimpleDo expression statement -> failure x
  AbsProgettoPar.WhileStateSimpleWDo expression b -> failure x
  AbsProgettoPar.WhileStateCtrlDo ctrldecstatement statement -> failure x
  AbsProgettoPar.WhileStateCtrlWDo ctrldecstatement b -> failure x

transDOSTATEMENT :: AbsProgettoPar.DOSTATEMENT -> Result
transDOSTATEMENT x = case x of
  AbsProgettoPar.DoWhileState statement expression -> failure x

transFORSTATEMENT :: AbsProgettoPar.FORSTATEMENT -> Result
transFORSTATEMENT x = case x of
  AbsProgettoPar.ForStateIndexDo indexvardec expression statement -> failure x
  AbsProgettoPar.ForStateIndexWDo indexvardec expression b -> failure x
  AbsProgettoPar.ForStateExprDo expression statement -> failure x
  AbsProgettoPar.ForStateExprWDo expression b -> failure x

transFORALLSTATEMENT :: AbsProgettoPar.FORALLSTATEMENT -> Result
transFORALLSTATEMENT x = case x of
  AbsProgettoPar.ForAllStateIndexDo indexvardec expression statement -> failure x
  AbsProgettoPar.ForAllStateIndexWDo indexvardec expression b -> failure x
  AbsProgettoPar.ForAllStateExprDo expression statement -> failure x
  AbsProgettoPar.ForAllStateExprWDo expression b -> failure x

transINDEXVARDEC :: AbsProgettoPar.INDEXVARDEC -> Result
transINDEXVARDEC x = case x of
  AbsProgettoPar.IndexVarDeclaration ident -> failure x

transELSESTATEMENT :: AbsProgettoPar.ELSESTATEMENT -> Result
transELSESTATEMENT x = case x of
  AbsProgettoPar.ElseStateEmpty -> failure x
  AbsProgettoPar.ElseState statement -> failure x

transRETURNSTATEMENT :: AbsProgettoPar.RETURNSTATEMENT -> Result
transRETURNSTATEMENT x = case x of
  AbsProgettoPar.ReturnState expression -> failure x
  AbsProgettoPar.ReturnStateEmpty -> failure x

transCTRLDECSTATEMENT :: AbsProgettoPar.CTRLDECSTATEMENT -> Result
transCTRLDECSTATEMENT x = case x of
  AbsProgettoPar.CtrlDecStateVar ident expression -> failure x
  AbsProgettoPar.CtrlDecStateConst ident expression -> failure x

transEXPRESSIONSTATEMENT :: AbsProgettoPar.EXPRESSIONSTATEMENT -> Result
transEXPRESSIONSTATEMENT x = case x of
  AbsProgettoPar.VariableExpression ident -> failure x
  AbsProgettoPar.CallExpression callexpression -> failure x

transCALLEXPRESSION :: AbsProgettoPar.CALLEXPRESSION -> Result
transCALLEXPRESSION x = case x of
  AbsProgettoPar.CallExpressionParentheses ident namedexpressionlist -> failure x
  AbsProgettoPar.CallExpressionQuadre ident namedexpressionlist -> failure x

transNAMEDEXPRESSIONLIST :: AbsProgettoPar.NAMEDEXPRESSIONLIST -> Result
transNAMEDEXPRESSIONLIST x = case x of
  AbsProgettoPar.NamedExpressionList namedexpression -> failure x
  AbsProgettoPar.NamedExpressionLists namedexpression namedexpressionlist -> failure x
  AbsProgettoPar.NamedExpressionAssigned ident expression -> failure x

transNAMEDEXPRESSION :: AbsProgettoPar.NAMEDEXPRESSION -> Result
transNAMEDEXPRESSION x = case x of
  AbsProgettoPar.NamedExpression expression -> failure x

transEXPRESSION :: AbsProgettoPar.EXPRESSION -> Result
transEXPRESSION x = case x of
  AbsProgettoPar.ExpressionIdent ident arrayindexelement -> failure x
  AbsProgettoPar.ExpressionInteger integer -> failure x
  AbsProgettoPar.ExpressionReal double -> failure x
  AbsProgettoPar.ExpressionString string -> failure x
  AbsProgettoPar.ExpressionChar char -> failure x
  AbsProgettoPar.ExpressionBoolean boolean -> failure x
  AbsProgettoPar.ExpressionBinary default_ binaryop expression -> failure x
  AbsProgettoPar.ExpressionUnary unaryop expression -> failure x
  AbsProgettoPar.ExpressionCast default_ primitivetype -> failure x
  AbsProgettoPar.ExpressionBracket expression -> failure x

transDEFAULT :: AbsProgettoPar.DEFAULT -> Result
transDEFAULT x = case x of
  AbsProgettoPar.ExpressionIdentD ident arrayindexelement -> failure x
  AbsProgettoPar.ExpressionIntegerD integer -> failure x
  AbsProgettoPar.ExpressionRealD double -> failure x
  AbsProgettoPar.ExpressionStringD string -> failure x
  AbsProgettoPar.ExpressionCharD char -> failure x
  AbsProgettoPar.ExpressionBooleanD boolean -> failure x
  AbsProgettoPar.ExpressionBracketD expression -> failure x

transUNARYOP :: AbsProgettoPar.UNARYOP -> Result
transUNARYOP x = case x of
  AbsProgettoPar.UnaryOperationPositive -> failure x
  AbsProgettoPar.UnaryOperationNegative -> failure x
  AbsProgettoPar.UnaryOperationNot -> failure x
  AbsProgettoPar.UnaryOperationPointer -> failure x

transBINARYOP :: AbsProgettoPar.BINARYOP -> Result
transBINARYOP x = case x of
  AbsProgettoPar.BinaryOperationPlus -> failure x
  AbsProgettoPar.BinaryOperationMinus -> failure x
  AbsProgettoPar.BinaryOperationProduct -> failure x
  AbsProgettoPar.BinaryOperationDivision -> failure x
  AbsProgettoPar.BinaryOperationModule -> failure x
  AbsProgettoPar.BinaryOperationPower -> failure x
  AbsProgettoPar.BinaryOperationAnd -> failure x
  AbsProgettoPar.BinaryOperationOr -> failure x
  AbsProgettoPar.BinaryOperationEq -> failure x
  AbsProgettoPar.BinaryOperationNotEq -> failure x
  AbsProgettoPar.BinaryOperationGratherEq -> failure x
  AbsProgettoPar.BinaryOperationGrather -> failure x
  AbsProgettoPar.BinaryOperationLessEq -> failure x
  AbsProgettoPar.BinaryOperationLess -> failure x

transLVALUEEXPRESSION :: AbsProgettoPar.LVALUEEXPRESSION -> Result
transLVALUEEXPRESSION x = case x of
  AbsProgettoPar.LvalueExpressions ident arrayindexelement lvalueexpression -> failure x
  AbsProgettoPar.LvalueExpression ident arrayindexelement -> failure x

transARRAYINDEXELEMENT :: AbsProgettoPar.ARRAYINDEXELEMENT -> Result
transARRAYINDEXELEMENT x = case x of
  AbsProgettoPar.ArrayIndexElement typeindex -> failure x
  AbsProgettoPar.ArrayIndexElementEmpty -> failure x

transTYPEINDEX :: AbsProgettoPar.TYPEINDEX -> Result
transTYPEINDEX x = case x of
  AbsProgettoPar.TypeOfIndexInt typeindex integer -> failure x
  AbsProgettoPar.TypeOfIndexIntSingle integer -> failure x
  AbsProgettoPar.TypeOfIndexVar typeindex ident -> failure x
  AbsProgettoPar.TypeOfIndexVarSingle ident -> failure x

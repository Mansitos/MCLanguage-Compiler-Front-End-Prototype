-- Haskell data types for the abstract syntax.
-- Generated by the BNF converter.

{-# LANGUAGE GeneralizedNewtypeDeriving #-}

-- | The abstract syntax of language progetto3par.

module AbsProgettoPar where

import Prelude (Char, Double, Integer, String)
import qualified Prelude as C (Eq, Ord, Show, Read)
import qualified Data.String

data Boolean a
    = Boolean_true | Boolean_false | Boolean_True | Boolean_False
  deriving (C.Eq, C.Ord, C.Show, C.Read)

newtype S a = StartCode (STATEMENTS a)
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data STATEMENTS a
    = ListStatements (STATEMENT a) (STATEMENTS a) | EmptyStatement
  deriving (C.Eq, C.Ord, C.Show, C.Read)

newtype B a = BlockStatement (STATEMENTS a)
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data STATEMENT a
    = Statement (B a)
    | ExpressionStatement (EXPRESSIONSTATEMENT a)
    | AssignmentStatement (LVALUEEXPRESSION a) (ASSIGNOP a) (EXPRESSION a)
    | ConditionalStatement (CONDITIONALSTATE a)
    | WhileDoStatement (WHILESTATEMENT a)
    | DoWhileStatement (DOSTATEMENT a)
    | ForStatement (FORSTATEMENT a)
    | BreakStatement
    | ContinueStatement
    | ReturnStatement (RETURNSTATEMENT a)
    | VariableDeclarationStatement (VARIABLETYPE a) (VARDECLIST a)
    | ForAllStatement (FORALLSTATEMENT a)
    | ProcedureStatement (Ident a ) (PARAMETERS a) (STATEMENTS a)
    | FunctionStatement (Ident a ) (PARAMETERS a) (PRIMITIVETYPE a) (STATEMENTS a)
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data PARAMETERS a
    = ParameterList (PARAMETER a) (PARAMETERS a) | ParameterListEmpty
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data PARAMETER a = Parameter (Ident a ) (PRIMITIVETYPE a)
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data ASSIGNOP a
    = AssignOperationEq
    | AssignOperationEqPlus
    | AssignOperationEqMinus
    | AssignOperationEqProd
    | AssignOperationEqFract
    | AssignOperationEqPercent
    | AssignOperationEqPower
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data VARIABLETYPE a
    = VariableTypeParam
    | VariableTypeConst
    | VariableTypeVar
    | VariableTypeRef
    | VariableTypeConstRef
  deriving (C.Eq, C.Ord, C.Show, C.Read)

newtype VARDECLIST a = VariableDeclarationSingle (VARDECID a)
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data VARDECID a = VariableDeclaration (IDENTLIST a) (TYPEPART a) (INITPART a)
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data IDENTLIST a
    = IdentifierList (Ident a ) (IDENTLIST a) | IdentifierSingle (Ident a)
  deriving (C.Eq, C.Ord, C.Show, C.Read)

newtype TYPEPART a = TypePart (TYPEEXPRESSION a)
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data INITPART a
    = InitializzationPart (EXPRESSION a)
    | InitializzationPartArray (LISTELEMENTARRAY a)
    | InitializzationPartEmpty
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data LISTELEMENTARRAY a
    = ListElementsOfArray (EXPRESSION a) (LISTELEMENTARRAY a)
    | ListElementOfArray (EXPRESSION a)
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data TYPEEXPRESSION a
    = TypeExpression (PRIMITIVETYPE a)
    | TypeExpressionArraySimple (RANGEEXP a) (PRIMITIVETYPE a)
    | TypeExpressionArray (RANGEEXP a) (PRIMITIVETYPE a)
    | TypeExpressionPointer (PRIMITIVETYPE a) POINTER
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data POINTER = PointerSymbol POINTER | PointerSymbolSingle
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data RANGEEXP a
    = RangeExpression (EXPRESSION a) (EXPRESSION a) (RANGEEXP a)
    | RangeExpressionSingle (EXPRESSION a) (EXPRESSION a)
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data PRIMITIVETYPE a
    = PrimitiveTypeVoid
    | PrimitiveTypeBool
    | PrimitiveTypeInt
    | PrimitiveTypeReal
    | PrimitiveTypeString
    | PrimitiveTypeChar
    | TypeArray (PRIMITIVETYPE a)
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data CONDITIONALSTATE a
    = ConditionalStatementSimpleThen (EXPRESSION a) (STATEMENT a) (ELSESTATEMENT a)
    | ConditionalStatementSimpleWThen (EXPRESSION a) (B a) (ELSESTATEMENT a)
    | ConditionalStatementCtrlThen (CTRLDECSTATEMENT a) (STATEMENT a) (ELSESTATEMENT a)
    | ConditionalStatementCtrlWThen (CTRLDECSTATEMENT a) (B a) (ELSESTATEMENT a)
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data WHILESTATEMENT a
    = WhileStateSimpleDo (EXPRESSION a) (STATEMENT a)
    | WhileStateSimpleWDo (EXPRESSION a) (B a)
    | WhileStateCtrlDo (CTRLDECSTATEMENT a) (STATEMENT a)
    | WhileStateCtrlWDo (CTRLDECSTATEMENT a) (B a)
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data DOSTATEMENT a = DoWhileState (STATEMENT a) (EXPRESSION a)
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data FORSTATEMENT a
    = ForStateIndexDo (INDEXVARDEC a) (EXPRESSION a) (STATEMENT a)
    | ForStateIndexWDo (INDEXVARDEC a) (EXPRESSION a) (B a)
    | ForStateExprDo (EXPRESSION a) (STATEMENT a)
    | ForStateExprWDo (EXPRESSION a) (B a)
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data FORALLSTATEMENT a
    = ForAllStateIndexDo (INDEXVARDEC a) (EXPRESSION a) (STATEMENT a)
    | ForAllStateIndexWDo (INDEXVARDEC a) (EXPRESSION a) (B a)
    | ForAllStateExprDo (EXPRESSION a) (STATEMENT a)
    | ForAllStateExprWDo (EXPRESSION a) (B a)
  deriving (C.Eq, C.Ord, C.Show, C.Read)

newtype INDEXVARDEC a = IndexVarDeclaration (Ident a)
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data ELSESTATEMENT a = ElseStateEmpty | ElseState (STATEMENT a)
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data RETURNSTATEMENT a = ReturnState (EXPRESSION a) | ReturnStateEmpty
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data CTRLDECSTATEMENT a
    = CtrlDecStateVar (Ident a ) (EXPRESSION a)
    | CtrlDecStateConst (Ident a ) (EXPRESSION a)
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data EXPRESSIONSTATEMENT a
    = VariableExpression (Ident a ) | CallExpression (CALLEXPRESSION a)
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data CALLEXPRESSION a
    = CallExpressionParentheses (Ident a ) (NAMEDEXPRESSIONLIST a)
    | CallExpressionQuadre (Ident a ) (NAMEDEXPRESSIONLIST a)
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data NAMEDEXPRESSIONLIST a
    = NamedExpressionList (NAMEDEXPRESSION a)
    | NamedExpressionLists (NAMEDEXPRESSION a) (NAMEDEXPRESSIONLIST a)
    | NamedExpressionAssigned (Ident a ) (EXPRESSION a)
  deriving (C.Eq, C.Ord, C.Show, C.Read)

newtype NAMEDEXPRESSION a = NamedExpression (EXPRESSION a)
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data EXPRESSION a
    = ExpressionIdent (Ident a ) (ARRAYINDEXELEMENT a)
    | ExpressionInteger Integer
    | ExpressionReal Double
    | ExpressionString String
    | ExpressionChar Char
    | ExpressionBoolean (Boolean a)
    | ExpressionBinary (DEFAULT a) (BINARYOP a) (EXPRESSION a)
    | ExpressionUnary (UNARYOP a) (EXPRESSION a)
    | ExpressionCast (DEFAULT a) (PRIMITIVETYPE a)
    | ExpressionBracket (EXPRESSION a)
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data DEFAULT a
    = ExpressionIdentD (Ident a ) (ARRAYINDEXELEMENT a)
    | ExpressionIntegerD Integer
    | ExpressionRealD Double
    | ExpressionStringD String
    | ExpressionCharD Char
    | ExpressionBooleanD (Boolean a)
    | ExpressionBracketD (EXPRESSION a)
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data UNARYOP a
    = UnaryOperationPositive
    | UnaryOperationNegative
    | UnaryOperationNot
    | UnaryOperationPointer
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data BINARYOP a
    = BinaryOperationPlus
    | BinaryOperationMinus
    | BinaryOperationProduct
    | BinaryOperationDivision
    | BinaryOperationModule
    | BinaryOperationPower
    | BinaryOperationAnd
    | BinaryOperationOr
    | BinaryOperationEq
    | BinaryOperationNotEq
    | BinaryOperationGratherEq
    | BinaryOperationGrather
    | BinaryOperationLessEq
    | BinaryOperationLess
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data LVALUEEXPRESSION a
    = LvalueExpressions (Ident a ) (ARRAYINDEXELEMENT a) (LVALUEEXPRESSION a)
    | LvalueExpression (Ident a ) (ARRAYINDEXELEMENT a)
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data ARRAYINDEXELEMENT a
    = ArrayIndexElement (TYPEINDEX a) | ArrayIndexElementEmpty
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data TYPEINDEX a
    = TypeOfIndexInt (TYPEINDEX a) Integer
    | TypeOfIndexIntSingle Integer
    | TypeOfIndexVar (TYPEINDEX a) (Ident a)
    | TypeOfIndexVarSingle (Ident a)
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Ident a = Ident String a
  deriving (C.Eq, C.Ord, C.Show, C.Read)


-- Haskell data types for the abstract syntax.
-- Generated by the BNF converter.

{-# LANGUAGE GeneralizedNewtypeDeriving #-}

-- | The abstract syntax of language progetto3par.

module AbsProgettoPar where

import Prelude (Char, Double, Integer, String)
import qualified Prelude as C (Eq, Ord, Show, Read)
import qualified Data.String

data Boolean
    = Boolean_true | Boolean_false | Boolean_True | Boolean_False
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data S = StartCode STATEMENTS
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data STATEMENTS
    = ListStatements STATEMENT STATEMENTS | EmptyStatement
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data B = BlockStatement STATEMENTS
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data STATEMENT
    = Statement B
    | ExpressionStatement EXPRESSIONSTATEMENT
    | AssignmentStatement LVALUEEXPRESSION ASSIGNOP EXPRESSION
    | ConditionalStatement CONDITIONALSTATE
    | WhileDoStatement WHILESTATEMENT
    | DoWhileStatement DOSTATEMENT
    | ForStatement FORSTATEMENT
    | BreakStatement
    | ContinueStatement
    | ReturnStatement RETURNSTATEMENT
    | VariableDeclarationStatement VARIABLETYPE VARDECLIST
    | ForAllStatement FORALLSTATEMENT
    | ProcedureStatement Ident PARAMETERS STATEMENTS
    | FunctionStatement Ident PARAMETERS PRIMITIVETYPE STATEMENTS
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data PARAMETERS
    = ParameterList PARAMETER PARAMETERS | ParameterListEmpty
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data PARAMETER = Parameter Ident PRIMITIVETYPE
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data ASSIGNOP
    = AssignOperationEq
    | AssignOperationEqPlus
    | AssignOperationEqMinus
    | AssignOperationEqProd
    | AssignOperationEqFract
    | AssignOperationEqPercent
    | AssignOperationEqPower
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data VARIABLETYPE
    = VariableTypeParam
    | VariableTypeConst
    | VariableTypeVar
    | VariableTypeRef
    | VariableTypeConstRef
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data VARDECLIST = VariableDeclarationSingle VARDECID
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data VARDECID = VariableDeclaration IDENTLIST TYPEPART INITPART
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data IDENTLIST
    = IdentifierList Ident IDENTLIST | IdentifierSingle Ident
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data TYPEPART = TypePart TYPEEXPRESSION
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data INITPART
    = InitializzationPart EXPRESSION
    | InitializzationPartArray LISTELEMENTARRAY
    | InitializzationPartEmpty
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data LISTELEMENTARRAY
    = ListElementsOfArray EXPRESSION LISTELEMENTARRAY
    | ListElementOfArray EXPRESSION
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data TYPEEXPRESSION
    = TypeExpression PRIMITIVETYPE
    | TypeExpressionArraySimple RANGEEXP PRIMITIVETYPE
    | TypeExpressionArray RANGEEXP PRIMITIVETYPE
    | TypeExpressionPointer PRIMITIVETYPE POINTER
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data POINTER = PointerSymbol POINTER | PointerSymbolSingle
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data RANGEEXP
    = RangeExpression EXPRESSION EXPRESSION RANGEEXP
    | RangeExpressionSingle EXPRESSION EXPRESSION
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data PRIMITIVETYPE
    = PrimitiveTypeVoid
    | PrimitiveTypeBool
    | PrimitiveTypeInt
    | PrimitiveTypeReal
    | PrimitiveTypeString
    | PrimitiveTypeChar
    | TypeArray PRIMITIVETYPE
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data CONDITIONALSTATE
    = ConditionalStatementSimpleThen EXPRESSION STATEMENT ELSESTATEMENT
    | ConditionalStatementSimpleWThen EXPRESSION B ELSESTATEMENT
    | ConditionalStatementCtrlThen CTRLDECSTATEMENT STATEMENT ELSESTATEMENT
    | ConditionalStatementCtrlWThen CTRLDECSTATEMENT B ELSESTATEMENT
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data WHILESTATEMENT
    = WhileStateSimpleDo EXPRESSION STATEMENT
    | WhileStateSimpleWDo EXPRESSION B
    | WhileStateCtrlDo CTRLDECSTATEMENT STATEMENT
    | WhileStateCtrlWDo CTRLDECSTATEMENT B
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data DOSTATEMENT = DoWhileState STATEMENT EXPRESSION
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data FORSTATEMENT
    = ForStateIndexDo INDEXVARDEC EXPRESSION STATEMENT
    | ForStateIndexWDo INDEXVARDEC EXPRESSION B
    | ForStateExprDo EXPRESSION STATEMENT
    | ForStateExprWDo EXPRESSION B
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data FORALLSTATEMENT
    = ForAllStateIndexDo INDEXVARDEC EXPRESSION STATEMENT
    | ForAllStateIndexWDo INDEXVARDEC EXPRESSION B
    | ForAllStateExprDo EXPRESSION STATEMENT
    | ForAllStateExprWDo EXPRESSION B
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data INDEXVARDEC = IndexVarDeclaration Ident
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data ELSESTATEMENT = ElseStateEmpty | ElseState STATEMENT
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data RETURNSTATEMENT = ReturnState EXPRESSION | ReturnStateEmpty
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data CTRLDECSTATEMENT
    = CtrlDecStateVar Ident EXPRESSION
    | CtrlDecStateConst Ident EXPRESSION
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data EXPRESSIONSTATEMENT
    = VariableExpression Ident | CallExpression CALLEXPRESSION
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data CALLEXPRESSION
    = CallExpressionParentheses Ident NAMEDEXPRESSIONLIST
    | CallExpressionQuadre Ident NAMEDEXPRESSIONLIST
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data NAMEDEXPRESSIONLIST
    = NamedExpressionList NAMEDEXPRESSION
    | NamedExpressionLists NAMEDEXPRESSION NAMEDEXPRESSIONLIST
    | NamedExpressionAssigned Ident EXPRESSION
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data NAMEDEXPRESSION = NamedExpression EXPRESSION
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data EXPRESSION
    = ExpressionIdent Ident ARRAYINDEXELEMENT
    | ExpressionInteger Integer
    | ExpressionReal Double
    | ExpressionString String
    | ExpressionChar Char
    | ExpressionBoolean Boolean
    | ExpressionBinary DEFAULT BINARYOP EXPRESSION
    | ExpressionUnary UNARYOP EXPRESSION
    | ExpressionCast DEFAULT PRIMITIVETYPE
    | ExpressionBracket EXPRESSION
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data DEFAULT
    = ExpressionIdentD Ident ARRAYINDEXELEMENT
    | ExpressionIntegerD Integer
    | ExpressionRealD Double
    | ExpressionStringD String
    | ExpressionCharD Char
    | ExpressionBooleanD Boolean
    | ExpressionBracketD EXPRESSION
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data UNARYOP
    = UnaryOperationPositive
    | UnaryOperationNegative
    | UnaryOperationNot
    | UnaryOperationPointer
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data BINARYOP
    = BinaryOperationPlus
    | BinaryOperationMinus
    | BinaryOperationProduct
    | BinaryOperationDivision
    | BinaryOperationModule
    | BinaryOperationPower
    | BinaryOperationAnd
    | BinaryOperationOr
    | BinaryOperationEq
    | BinaryOperationNotEq
    | BinaryOperationGratherEq
    | BinaryOperationGrather
    | BinaryOperationLessEq
    | BinaryOperationLess
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data LVALUEEXPRESSION
    = LvalueExpressions Ident ARRAYINDEXELEMENT LVALUEEXPRESSION
    | LvalueExpression Ident ARRAYINDEXELEMENT
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data ARRAYINDEXELEMENT
    = ArrayIndexElement TYPEINDEX | ArrayIndexElementEmpty
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data TYPEINDEX
    = TypeOfIndexInt TYPEINDEX Integer
    | TypeOfIndexIntSingle Integer
    | TypeOfIndexVar TYPEINDEX Ident
    | TypeOfIndexVarSingle Ident
  deriving (C.Eq, C.Ord, C.Show, C.Read)

newtype Ident = Ident String 
  deriving (C.Eq, C.Ord, C.Show, C.Read, Data.String.IsString)

